############################ -*- Mode: Makefile -*- ###########################
## project.defaults --- 
## Author           : Manoj Srivastava ( srivasta@ember.stdc.com ) 
## Created On       : Thu Aug  9 20:38:54 2001
## Created On Node  : ember.stdc.com
## Last Modified By : Manoj Srivastava
## Last Modified On : Tue Nov 27 22:14:11 2001
## Last Machine Used: glaurung.stdc.com
## Update Count     : 89
## Status           : Unknown, Use with caution!
## HISTORY          : 
## Description      : 
## 
###############################################################################


###############################################################################
##
## $Id: project.defaults,v 1.15 2001/12/02 03:30:21 srivasta Exp $
##
###############################################################################


###################################
# External programs and libraries #
###################################

ifndef DEFAULT_ACE_ROOT
DEFAULT_ACE_ROOT = /opt/ACE_wrappers
endif

ifndef ACE_ROOT
export ACE_ROOT = $(DEFAULT_ACE_ROOT)
endif

ifndef DEFAULT_TAO_ROOT
DEFAULT_TAO_ROOT = $(ACE_ROOT)/TAO
endif

ifndef TAO_ROOT
export TAO_ROOT = $(DEFAULT_TAO_ROOT)
endif

ifndef DEFAULT_XERCESCROOT
DEFAULT_XERCESCROOT = /opt/Xerces
endif

ifndef XERCESCROOT
export XERCESCROOT = $(DEFAULT_XERCESCROOT)
endif

ifndef DEFAULT_XALANCROOT
DEFAULT_XALANCROOT = /opt/Xalan/c
endif

ifndef XALANCROOT
export XALANCROOT = $(DEFAULT_XALANCROOT)
endif


ifndef DEFAULT_REMOS_ROOT
DEFAULT_REMOS_ROOT = /opt/Remos
endif

ifndef REMOS_ROOT
export REMOS_ROOT = $(DEFAULT_REMOS_ROOT)
endif


ifneq ($(strip $(XERCESCROOT)),)
ifeq (,$(findstring $(DEFAULT_LD_LIBRARY_PATH),$(XERCESCROOT)))
DEFAULT_LD_LIBRARY_PATH:=$(XERCESCROOT)/lib
endif
endif

ifneq ($(strip $(XALANCROOT)),)
ifeq (,$(findstring $(DEFAULT_LD_LIBRARY_PATH),$(XALANCROOT)))
DEFAULT_LD_LIBRARY_PATH:=$(XALANCROOT)/lib:$(DEFAULT_LD_LIBRARY_PATH)
endif
endif


ifneq ($(strip $(REMOS_ROOT)),)
ifeq (,$(findstring $(DEFAULT_LD_LIBRARY_PATH),$(REMOS_ROOT)))
ifneq (,$(findstring 86,$(MACHINE)))
ifeq ($(strip $(SYSTEM)),linux)
DEFAULT_LD_LIBRARY_PATH:=$(REMOS_ROOT)/modeler/lib/I386/LINUX:$(DEFAULT_LD_LIBRARY_PATH)
endif
endif
endif
endif

ifneq ($(strip $(TAO_ROOT)),)
ifeq (,$(findstring $(DEFAULT_LD_LIBRARY_PATH),$(TAO_ROOT)/tao))
DEFAULT_LD_LIBRARY_PATH:=$(TAO_ROOT)/tao:$(DEFAULT_LD_LIBRARY_PATH)
endif
endif

ifneq ($(strip $(ACE_ROOT)),)
ifeq (,$(findstring $(DEFAULT_LD_LIBRARY_PATH),$(ACE_ROOT)/ace))
DEFAULT_LD_LIBRARY_PATH:=$(ACE_ROOT)/ace:$(DEFAULT_LD_LIBRARY_PATH)
endif
endif



ifneq ($(strip $(DEFAULT_LD_LIBRARY_PATH)),)
LD_LIBRARY_PATH=$(DEFAULT_LD_LIBRARY_PATH)
endif
export LD_LIBRARY_PATH


                    #################################
                    # Directories and install paths #
                    #################################

# Common prefix for installation directories.
# NOTE: This directory must exist when you start the install.
#DEFAULT_prefix := $(STDCTOP)/local/$(ARCHITECTURE)/install
DEFAULT_prefix := /usr/local
ifeq ($(strip $(prefix)),)
prefix = $(DEFAULT_prefix)
endif


# A prefix used in constructing the default values of some of the
# variables listed below.  Generally, `$(exec_prefix)' is used for
# directories that contain machine-specific files (such as executables
# and subroutine libraries), while `$(prefix)' is used directly for
# other directories
DEFAULT_exec_prefix := $(prefix)
ifeq ($(strip $(exec_prefix)),)
exec_prefix = $(DEFAULT_exec_prefix)
endif

# The directory for installing executable programs that users can run
# from the shell, but are only generally useful to system
# administrators. 
DEFAULT_bindir := $(exec_prefix)/bin
ifeq ($(strip $(bindir)),)
bindir = $(DEFAULT_bindir)
endif

# The directory for installing executable programs that can be run
DEFAULT_sbindir = $(exec_prefix)/sbin
ifeq ($(strip $(sbindir)),)
sbindir = $(DEFAULT_sbindir)
endif

# The directory for object files and libraries of object code.
DEFAULT_libdir :=  $(exec_prefix)/lib
ifeq ($(strip $(libdir)),)
libdir = $(DEFAULT_libdir)
endif

# The directory for installing executable programs to be run by other
# programs rather than by users. 
DEFAULT_libexecdir = $(exec_prefix)/libexec
ifeq ($(strip $(libexecdir)),)
sbindir = $(DEFAULT_libexecdi)
endif

# The directory for installing read-only architecture independent data
# files.  
DEFAULT_datadir := $(exec_prefix)/share
ifeq ($(strip $(datadir)),)
datadir = $(DEFAULT_datadir)
endif


# The directory for installing architecture-independent data files
# which the programs modify while they run.  
DEFAULT_sharedstatedir := $(prefix)/com
ifeq ($(strip $(sharedstatedir)),)
sharedstatedir = $(DEFAULT_sharedstatedir)
endif

# The directory for installing data files which the programs modify
# while they run, and that pertain to one specific machine.  Users
# should never need to modify files in this directory to configure the
# package's operation; put such configuration information in eparate
# files that go in `$(datadir)' or `$(sysconfdir)'. 
DEFAULT_localstatedir = $(prefix)/var
ifeq ($(strip $(localstatedir)),)
localstatedir = $(DEFAULT_localstatedir)
endif


# The directory for installing header files to be included by user
# programs with the C `#include' preprocessor directive. 
DEFAULT_includedir := $(exec_prefix)/include
ifeq ($(strip $(includedir)),)
includedir = $(DEFAULT_includedir)
endif

DEFAULT_oldincludedir := /usr/include
ifeq ($(strip $(oldincludedir)),)
oldincludedir = $(DEFAULT_oldincludedir)
endif

DEFAULT_scriptdir := $(exec_prefix)/scripts
ifeq ($(strip $(scriptdir)),)
scriptdir = $(DEFAULT_scriptdir)
endif

# The directory for installing the Info files for this package.
DEFAULT_infodir = $(prefix)/info
ifeq ($(strip $(infodir)),)
infodir = $(DEFAULT_infodir)
endif

# The directory for installing any Emacs Lisp files in this package.
DEFAULT_lispdir = $(prefix)/share/emacs/site-lisp
ifeq ($(strip $(lispdir)),)
lispdir = $(DEFAULT_lispdir)
endif


DEFAULT_idldir := $(includedir)
ifeq ($(strip $(idldir)),)
idldir = $(DEFAULT_idldir)
endif

# The directory for installing read-only data files that pertain to a
# single machine-that is to say, files for configuring a host. Mailer
# and network configuration files, `/etc/passwd', and so forth belong
# here.  All the files in this directory should be ordinary ASCII text
# files. 
DEFAULT_sysconfdir = $(prefix)/etc
ifeq ($(strip $(sysconfdir)),)
sysconfdir = $(DEFAULT_sysconfdir)
endif
DEFAULT_etcdir := $(exec_prefix)/etc
ifeq ($(strip $(etcdir)),)
etcdir = $(DEFAULT_etcdir)
endif

DEFAULT_docdir := $(exec_prefix)/share/doc
ifeq ($(strip $(docdir)),)
docdir = $(DEFAULT_docdir)
endif

# The top-level directory for installing the man pages (if any) for
# this package, as well as the directories for installing the sections
# of the man pages
DEFAULT_mantop := $(exec_prefix)/share/man
ifeq ($(strip $(mantop)),)
mantop = $(DEFAULT_mantop)
endif


DEFAULT_manext := 1
ifeq ($(strip $(manext)),)
manext = $(DEFAULT_manext)
endif

DEFAULT_mandir := $(mantop)/man$(manext)
ifeq ($(strip $(mandir)),)
mandir = $(DEFAULT_mandir)
endif

DEFAULT_man1dir := $(mantop)/man1
ifeq ($(strip $(man1dir)),)
man1dir = $(DEFAULT_man1dir)
endif

DEFAULT_man2dir := $(mantop)/man2
ifeq ($(strip $(man1dir)),)
man2dir = $(DEFAULT_man2dir)
endif


DEFAULT_man3dir := $(mantop)/man3
ifeq ($(strip $(man3dir)),)
man3dir = $(DEFAULT_man3dir)
endif

DEFAULT_man4dir := $(mantop)/man4
ifeq ($(strip $(man4dir)),)
man4dir = $(DEFAULT_man4dir)
endif

DEFAULT_man5dir := $(mantop)/man5
ifeq ($(strip $(man1dir)),)
man5dir = $(DEFAULT_man5dir)
endif

DEFAULT_man6dir := $(mantop)/man6
ifeq ($(strip $(man6dir)),)
man6dir = $(DEFAULT_man6dir)
endif

DEFAULT_man7dir := $(mantop)/man7
ifeq ($(strip $(man7dir)),)
man7dir = $(DEFAULT_man7dir)
endif

DEFAULT_man8dir := $(mantop)/man8
ifeq ($(strip $(man8dir)),)
man8dir = $(DEFAULT_man8dir)
endif

DEFAULT_manldir := $(mantop)/manl
ifeq ($(strip $(manldir)),)
manldir = $(DEFAULT_manldir)
endif

DEFAULT_manndir := $(mantop)/mann
ifeq ($(strip $(manndir)),)
manndir = $(DEFAULT_manndir)
endif

DEFAULT_infodir := $(exec_prefix)/info
ifeq ($(strip $(infodir)),)
infodir = $(DEFAULT_infodir)
endif

DEFAULT_nlsdir := $(exec_prefix)/nls/msg/en_US.ASCII
ifeq ($(strip $(nlsdir)),)
nlsdir = $(DEFAULT_nlsdir)
endif


DEFAULT_SRCDIR := $(shell if [ "$$PWD" != "" ]; then echo $$PWD; else pwd; fi)
ifeq ($(strip $(SRCDIR)),)
SRCDIR = $(DEFAULT_SRCDIR)
endif

DEFAULT_OBJTOP := $(SRCTOP)/build/$(ARCHITECTURE)/
ifeq ($(strip $(OBJTOP)),)
OBJTOP = $(DEFAULT_OBJTOP)
endif

DEFAULT_OBJDIR := $(subst $(SRCTOP),$(SRCTOP)/build/$(ARCHITECTURE),$(SRCDIR))
ifeq ($(strip $(OBJDIR)),)
OBJDIR = $(DEFAULT_OBJDIR)
endif


DEFAULT_VPATH += $(OBJDIR):$(SRCDIR)


VPATH+=$(DEFAULT_VPATH)


    #################################################################
    # includevpath --  include include directories for header files #
    #################################################################

ifdef VPATH
DEFAULT_INCLUDEVPATH = $(subst :, ,$(VPATH))
endif

ifeq ($(strip $(INCLUDEVPATH)),)
INCLUDEVPATH=$(DEFAULT_INCLUDEVPATH)
endif

ifdef VPATH
DEFAULT_INCLUDELIBVPATH = $(subst :, ,$(VPATH))
endif

ifeq ($(strip $(INCLUDELIBVPATH)),)
INCLUDELIBVPATH=$(DEFAULT_INCLUDELIBVPATH)
endif


ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_XINCLUDE=$(CONFIGURE_XINCLUDE)
endif


ifeq ($(strip $(XINCLUDE)),)
XINCLUDE = $(DEFAULT_XINCLUDE)
endif


ifneq ($(strip $(TAO_ROOT)),)
DEFAULT_INCPATHS += $(TAO_ROOT)/tao
endif

ifneq ($(strip $(ACE_ROOT)),)
DEFAULT_INCPATHS += $(ACE_ROOT)/ace
endif

ifneq ($(strip $(TAO_ROOT)),)
DEFAULT_C++IINCPATHS += $(TAO_ROOT)/tao
endif

ifneq ($(strip $(ACE_ROOT)),)
DEFAULT_C++IINCPATHS += $(ACE_ROOT)/ace
endif

DEFAULT_INCPATHS += $(SRCDIR) $(INCLUDEVPATH) $(XINCLUDE) 

DEFAULT_C++INCPATHS = $(SRCDIR) $(INCLUDEVPATH) $(XINCLUDE) 

ifeq ($(strip $(INCPATHS)),)
INCPATHS = $(DEFAULT_INCPATHS)
endif

ifeq ($(strip $(C++INCPATHS)),)
C++INCPATHS = $(DEFAULT_C++INCPATHS)
endif



                      ##############################
                      # Compiling Shared Libraries #
                      ##############################

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_PIC = $(CONFIGURE_PIC)
endif
ifeq ($(strip $(DEFAULT_PIC)),)
DEFAULT_PIC = -D_REENTRANT -fPIC
endif

ifeq ($(strip $(PIC)),)
PIC = $(DEFAULT_PIC)
else
ifeq "$(origin PIC)" "default"
PIC = $(DEFAULT_PIC)
endif
endif


ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_SHLINK = $(CONFIGURE_SHLINK)
endif
ifeq ($(strip $(DEFAULT_SHLINK)),)
DEFAULT_SHLINK = -shared 
endif

ifeq ($(strip $(SHLINK)),)
SHLINK = $(DEFAULT_SHLINK)
else
ifeq "$(origin SHLINK)" "default"
SHLINK = $(DEFAULT_SHLINK)
endif
endif



                  #####################################
                  # Files extracted from SRC variable #
                  #####################################

ifdef SRC
DEFAULT_IDL_FILES +=$(filter %.idl,$(SRC))
endif
ifeq ($(strip $(IDL_FILES)),)
IDL_FILES = $(DEFAULT_IDL_FILES)
endif


ifdef SRC
DEFAULT_LEXFILES +=$(filter %.l,$(SRC))
endif
ifeq ($(strip $(LEXFILES)),)
LEXFILES = $(DEFAULT_LEXFILES)
endif


ifdef SRC
DEFAULT_YACCFILES +=$(filter %.y,$(SRC))
endif
ifeq ($(strip $(YACCFILES)),)
YACCFILES = $(DEFAULT_YACCFILES)
endif


ifdef SRC
DEFAULT_HEADERS +=$(filter %.h,$(SRC)) 
endif
ifeq ($(strip $(HEADERS)),)
HEADERS = $(DEFAULT_HEADERS)
endif


ifdef SRC
DEFAULT_CFILES +=$(patsubst %.l,%.yy.c,$(LEXFILES)) \
                 $(patsubst %.y,%.tab.c,$(YACCFILES)) \
                 $(filter %.c,$(SRC))
endif
ifeq ($(strip $(CFILES)),)
CFILES = $(DEFAULT_CFILES)
endif



ifdef SRC
DEFAULT_C++FILES +=$(filter %.cpp,$(SRC))
endif

IDL_EXT_MINUS=            $(IDL_CLIENT_INL_EXT)  $(IDL_CLIENT_SRC_EXT) \
   $(IDL_SERVER_HDR_EXT)  $(IDL_SERVER_INL_EXT)  $(IDL_SERVER_SRC_EXT) \
   $(IDL_SERVER_THDR_EXT) $(IDL_SERVER_TINL_EXT) $(IDL_SERVER_TSRC_EXT) 
IDL_EXT=$(IDL_CLIENT_HDR_EXT) $(IDL_EXT_MINUS)

ifneq ($(strip $(IDL_FILES)),)
DEFAULT_HEADERS +=$(patsubst %.idl,$(OBJDIR)/%$(IDL_CLIENT_HDR_EXT), \
                                                $(IDL_FILES))
DEFAULT_HEADERS +=$(patsubst %.idl,$(OBJDIR)/%$(IDL_SERVER_HDR_EXT), \
                                                $(IDL_FILES))
DEFAULT_HEADERS +=$(patsubst %.idl,$(OBJDIR)/%$(IDL_SERVER_THDR_EXT), \
                                                $(IDL_FILES))

DEFAULT_C++_IDLFILES+=$(patsubst %.idl,%$(IDL_SERVER_SRC_EXT),  $(IDL_FILES))
DEFAULT_C++_IDLFILES+=$(patsubst %.idl,%$(IDL_CLIENT_SRC_EXT),  $(IDL_FILES))
DEFAULT_C++_IDLFILES+=$(patsubst %.idl,%$(IDL_SERVER_TSRC_EXT), $(IDL_FILES))

endif

ifeq ($(strip $(C++FILES)),)
C++FILES = $(DEFAULT_C++FILES)
endif

ifeq ($(strip $(C++_IDLFILES)),)
C++_IDLFILES = $(DEFAULT_C++_IDLFILES)
endif

ifneq ($(strip $(C++_IDLFILES)),)
IDL_TARGETS=$(patsubst %,$(OBJDIR)/%,$(C++_IDLFILES)) 
endif


ifneq ($(strip $(CFILES) $(C++FILES) $(C++_IDLFILES)),)
DEFAULT_OBJECTS+=$(patsubst %.c,$(OBJDIR)/%.o,$(CFILES)) $(patsubst %.cpp,$(OBJDIR)/%.o,$(C++FILES))
DEFAULT_OBJECTS +=$(patsubst %.cpp,$(OBJDIR)/%.o,$(C++_IDLFILES)) 
endif
ifeq ($(strip $(OBJECTS)),)
OBJECTS = $(DEFAULT_OBJECTS)
endif



                              #############
			      #    cpp    #
                              #############

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_CPP = $(CONFIGURE_CPP)
else
DEFAULT_CPP = $(CC) -M
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++PP = $(CONFIGURE_C++PP)
else
DEFAULT_C++PP = $(C++) -M
endif

ifeq ($(strip $(CPP)),)
CPP = $(DEFAULT_CPP) 
else
ifeq "$(origin CPP)" "default"
CPP = $(DEFAULT_CPP) 
endif
endif

ifeq ($(strip $(C++PP)),)
C++PP = $(DEFAULT_C++PP) 
ifeq "$(origin C++PP)" "default"
C++PP = $(DEFAULT_C++PP) 
endif
endif


                              #############
                              # cpp flags #
                              #############


ifeq ($(strip $(DEPFLAGS)),)
DEPFLAGS =  ${DEFAULT_DEPFLAGS}
endif


ifeq ($(strip $(C++DEPFLAGS)),)
C++DEPFLAGS =  ${DEFAULT_C++DEPFLAGS}
endif

############################################################################

ifeq ($(strip $(CPPINCFLAGS)),)
CPPINCFLAGS = $(DEFAULT_CPPINCFLAGS)
endif


ifeq ($(strip $(C++CPPINCFLAGS)),)
C++CPPINCFLAGS = $(DEFAULT_C++CPPINCFLAGS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_CPPFLAGS=${CONFIGURE_CPPFLAGS}
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++CPPFLAGS=${CONFIGURE_C++CPPFLAGS}
endif

ifeq ($(strip $(DEFAULT_CPPINCFLAGS)),)
DEFAULT_CPPINCFLAGS = $(addprefix -I,$(strip $(INCPATHS)))
endif

ifeq ($(strip $(DEFAULT_C++CPPINCFLAGS)),)
DEFAULT_C++CPPINCFLAGS = $(addprefix -I,$(strip $(C++INCPATHS)))
endif


DEFAULT_CPPFLAGS += $(CPPINCFLAGS)
DEFAULT_C++CPPFLAGS += $(C++CPPINCFLAGS)

## CPPFLAGS are also defined by external files
CPPFLAGS += $(DEFAULT_CPPFLAGS) $(CPP_DEFINES)
C++CPPFLAGS = $(DEFAULT_C++CPPFLAGS) $(C++PP_DEFINES)


                         #######################
                         # C and C++ compilers #
                         #######################

# default compiler.
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_CC = $(CONFIGURE_CC)
else
DEFAULT_CC = cc
endif

ifeq ($(strip $(CC)),)
CC=$(DEFAULT_CC)
else
ifeq "$(origin CC)" "default"
CC=$(DEFAULT_CC)
endif
endif

# c++
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++ = $(CONFIGURE_CPLUSPLUS)
endif

ifeq ($(strip $(C++)),)
C++ = $(DEFAULT_C++)
ifeq "$(origin C++)" "default"
C++ = $(DEFAULT_C++)
endif
endif

                           ###################
                           # C and C++ flags #
                           ###################

# default compilation - add optimizingflags here when needed.
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_CWARNS=$(CONFIGURE_CWARNS)
else
DEFAULT_CWARNS=
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++WARNS=$(CONFIGURE_CPLUSWARNS)
else
DEFAULT_C++WARNS=-W -Wall -Wpointer-arith -Wno-uninitialized 
endif

#DEFAULT_CWARNS +=
ifeq ($(strip $(CWARNS)),)
CWARNS = $(DEFAULT_CWARNS)
endif

ifeq ($(strip $(C++WARNS)),)
C++WARNS = $(DEFAULT_C++WARNS)
endif


##        DEFAULT_COPTS += -O -Olimit 2900
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_COPTS =$(CONFIGURE_OPTIMIZE)
else
DEFAULT_COPTS = -pipe -O3 -g
endif


ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++OPTS =$(CONFIGURE_C++OPTIMIZE)
else
DEFAULT_C++OPTS += -pipe -O3 -g
endif

ifeq ($(strip $(COPTS)),)
COPTS = $(DEFAULT_COPTS)
endif

ifeq ($(strip $(C++OPTS)),)
C++OPTS = $(DEFAULT_C++OPTS)
endif

## Debug flags
DEFAULT_CDEBUG += -g
ifeq ($(strip $(CDEBUG)),)
CDEBUG = $(DEFAULT_CDEBUG)
endif

DEFAULT_C++DEBUG += -g
ifeq ($(strip $(C++DEBUG)),)
C++DEBUG = $(DEFAULT_C++DEBUG)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_CFLAGS=$(CONFIGURE_CFLAGS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++FLAGS=$(CONFIGURE_C++FLAGS) $(DCCFLAGS)
endif


# CFLAGS are initialized externally
CFLAGS   += $(DEFAULT_CFLAGS)
C++FLAGS += $(DEFAULT_C++FLAGS)  

ifdef DO_DEBUG
CFLAGS += $(CDEBUG) $(DCFLAGS)
endif

ifdef DO_DEBUG
C++FLAGS += $(C++DEBUG)
endif

ifdef DO_OPTIMIZE
CFLAGS += $(COPTS)
endif

ifdef DO_OPTIMIZE
C++FLAGS += $(C++OPTS)
endif



#
ifneq ($(strip $(DEBUG)),)
CFLAGS += -DDEBUG=$(DEBUG)
endif

ifneq ($(strip $(DEBUG)),)
C++FLAGS += -DDEBUG=$(DEBUG)
endif


ifneq ($(strip $(DEBUGMASK)),)
CFLAGS += -DDEBUGMASK=$(DEBUGMASK)
endif

ifneq ($(strip $(DEBUGMASK)),)
C++FLAGS += -DDEBUGMASK=$(DEBUGMASK)
endif


ifeq ($(strip $(NO_WARNS)),)
CFLAGS += $(CWARNS)
endif

ifeq ($(strip $(NO_WARNS)),)
C++FLAGS += $(C++WARNS)
endif

CFLAGS += $(C_DEFINES)
C++FLAGS += $(C++_DEFINES)


                              ##############
                              # lib  Paths #
                              ##############

# includes for libraries
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_XLIBPATH=$(CONFIGURE_XLIBPATH)
endif

ifeq ($(strip $(XLIBPATH)),)
XLIBPATH = $(DEFAULT_XLIBPATH)
endif

DEFAULT_LIBPATH += $(STDCTOP)/local/$(ARCHITECTURE)/install/lib $(INCLUDELIBVPATH) $(XLIBPATH)
DEFAULT_C++LIBPATH += $(STDCTOP)/local/$(ARCHITECTURE)/install/lib $(INCLUDELIBVPATH) $(XLIBPATH)


ifeq ($(strip $(LIBPATH)),)
LIBPATH = $(DEFAULT_LIBPATH)
endif

ifeq ($(strip $(C++LIBPATH)),)
C++LIBPATH = $(DEFAULT_C++LIBPATH)
endif


                              ##############
                              # Load Flags #
                              ##############



ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_LDFLAGS=$(CONFIGURE_LDFLAGS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++LDFLAGS=$(CONFIGURE_CPLUSLDFLAGS)
endif



DEFAULT_LDFLAGS += $(addprefix -L,$(strip $(LIBPATH)))
DEFAULT_C++LDFLAGS += $(addprefix -L,$(strip $(C++LIBPATH)))

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_LD_DEBUGFLG=$(CONFIGURE_LD_DEBUGFLG)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++LD_DEBUGFLG=$(CONFIGURE_C++LD_DEBUGFLG)
endif


ifeq ($(strip $(LD_DEBUGFLG)),)
LD_DEBUGFLG=$(DEFAULT_LD_DEBUGFLG)
endif

ifeq ($(strip $(C++LD_DEBUGFLG)),)
C++LD_DEBUGFLG=$(DEFAULT_C++LD_DEBUGFLG)
endif

ifdef DO_DEBUG
DEFAULT_LDFLAGS += $(LD_DEBUGFLG)
endif

ifdef DO_DEBUG
DEFAULT_C++LDFLAGS += $(C++LD_DEBUGFLG)
endif


ifeq ($(strip $(LDFLAGS)),)
LDFLAGS = $(DEFAULT_LDFLAGS) $(LD_DEFINES)
endif


ifeq ($(strip $(C++LDFLAGS)),)
C++LDFLAGS = $(DEFAULT_C++LDFLAGS) $(C++LD_DEFINES)
endif



                    #################################
                    # libraries given to the loader #
                    #################################

DEFAULT_XLIBS = -lXm -lXt -lX11
ifeq ($(strip $(XLIBS)),)
XLIBS = $(DEFAULT_XLIBS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_LIBS=$(CONFIGURE_LIBS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++LIBS=$(CONFIGURE_C++LIBS)
endif


ifeq ($(strip $(LIBS)),)
LIBS = $(DEFAULT_LIBS)
endif

ifeq ($(strip $(C++LIBS)),)
C++LIBS = $(DEFAULT_C++LIBS)
endif



                        ##########################
                        # IDL compiler and flags #
                        ##########################

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_IDL = $(CONFIGURE_IDL)
endif

ifeq ($(strip $(DEFAULT_IDL)),)
DEFAULT_IDL = $(TAO_ROOT)/TAO_IDL/tao_idl
endif


ifeq ($(strip $(IDL)),)
IDL = $(DEFAULT_IDL)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_CIDL_FLAGS=$(CONFIGURE_CIDLFLAGS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_C++IDL_FLAGS=$(CONFIGURE_CPLUSIDLFLAGS) 
endif


DEFAULT_CIDL_FLAGS += $(TAO_IDLFLAGS) -o $(OBJDIR) -Ge 0
DEFAULT_CIDL_FLAGS += $(CPPINCFLAGS)

DEFAULT_C++IDL_FLAGS += $(TAO_IDLFLAGS) -o $(OBJDIR) -Ge 0
DEFAULT_C++IDL_FLAGS += $(C++CPPINCFLAGS)

ifeq ($(strip $(CIDL_FLAGS)),)
CIDL_FLAGS = $(DEFAULT_CIDL_FLAGS)
endif

ifeq ($(strip $(C++IDL_FLAGS)),)
C++IDL_FLAGS = $(DEFAULT_C++IDL_FLAGS)
endif

                                 #######
                                 # lex #
                                 #######
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_LEX :=$(CONFIGURE_LEX)
else
DEFAULT_LEX :=flex
endif

ifeq ($(strip $(LEX)),)
LEX=$(DEFAULT_LEX)
endif
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_NORM_LEXFLAGS=$(CONFIGURE_LEXFLAGS)
else
DEFAULT_NORM_LEXFLAGS += -bCF
endif

ifeq ($(strip $(NORM_LEXFLAGS)),)
NORM_LEXFLAGS = $(DEFAULT_NORM_LEXFLAGS=)
endif

DEFAULT_LEXDEBUG += -dpv
ifeq ($(strip $(LEXDEBUG)),)
LEXDEBUG = $(DEFAULT_LEXDEBUG)
endif

DEFAULT_LEXFLAGS += $(NORM_LEXFLAGS) $(LEXDEBUG)

ifeq ($(strip $(LEXFLAGS)),)
LEXFLAGS= $(DEFAULT_LEXFLAGS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_LEX_LIBS=$(CONFIGURE_LIBFLEX)
endif

ifeq ($(strip $(LEX_LIBS)),)
LEX_LIBS=$(DEFAULT_LEX_LIBS)
endif

##ifeq ($(strip $(LEX_LIBS)),)
##DEFAULT_LDFLAGS += $(LEX_LIBS)
##endif


                                 ########
                                 # yacc #
                                 ########
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_YACC := $(CONFIGURE_YACC)
else
DEFAULT_YACC := yacc
endif

ifeq ($(strip $(YACC)),)
YACC=$(DEFAULT_YACC)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_YACCFLAGS=$(CONFIGURE_YACCFLAGS)
else
DEFAULT_YACCFLAGS += -v -d
endif

ifeq ($(strip $(YACCFLAGS)),)
YACCFLAGS= $(DEFAULT_YACCFLAGS)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_YACC_LIBS=$(CONFIGURE_LIBYACC)
endif

ifeq ($(strip $(YACC_LIBS)),)
YACC_LIBS=$(DEFAULT_YACC_LIBS)
endif


##ifeq ($(strip $(YACC_LIBS)),)
##DEFAULT_LDFLAGS += $(YACC_LIBS)
##endif


                              #############
                              # Makefiles #
                              #############

# make for recursive invocation

DEFAULT_MAKEFILE := Makefile
ifeq ($(strip $(MAKEFILE)),)
MAKEFILE=$(DEFAULT_MAKEFILE)
endif

# )))
# ((( Archiving
ifneq ($(strip $(LIBRARIES)),)
DEFAULT_ARCHIVES +=  $(LIBRARIES)
endif
ifeq ($(strip $(ARCHIVES)),)
ARCHIVES =  $(DEFAULT_ARCHIVES)
endif

ifneq ($(strip $(SHARED_LIBRARIES)),)
DEFAULT_SHARED_ARCHIVES +=  $(patsubst %,%_SHLIB,$(SHARED_LIBRARIES))
endif
ifeq ($(strip $(SHARED_ARCHIVES)),)
SHARED_ARCHIVES =  $(DEFAULT_SHARED_ARCHIVES)
endif


DEFAULT_AR := ar
ifeq ($(strip $(AR)),)
AR = $(DEFAULT_AR)
endif


ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_RANLIB := $(CONFIGURE_RANLIB)
else
DEFAULT_RANLIB := ranlib
endif

ifeq ($(strip $(RANLIB)),)
RANLIB = $(DEFAULT_RANLIB)
endif

DEFAULT_ARFLAGS += crvs
ifeq ($(strip $(ARFLAGS)),)
ARFLAGS = $(DEFAULT_ARFLAGS)
endif

# )))
# ((( Install modes and install

# install modes
DEFAULT_INSTALL_MODE := 0644
ifeq ($(strip $(INSTALL_MODE)),)
INSTALL_MODE = $(DEFAULT_INSTALL_MODE)
endif

DEFAULT_BIN_INSTALL_MODE := 0755
ifeq ($(strip $(BIN_INSTALL_MODE)),)
BIN_INSTALL_MODE= $(DEFAULT_BIN_INSTALL_MODE)
endif

DEFAULT_etc_INSTALL_MODE = $(DEFAULT_INSTALL_MODE)
ifeq ($(strip $(etc_INSTALL_MODE)),)
etc_INSTALL_MODE = $(DEFAULT_etc_INSTALL_MODE)
endif

DEFAULT_bin_INSTALL_MODE = $(BIN_INSTALL_MODE)
ifeq ($(strip $(bin_INSTALL_MODE)),)
bin_INSTALL_MODE = $(DEFAULT_bin_INSTALL_MODE)
endif

DEFAULT_script_INSTALL_MODE = $(BIN_INSTALL_MODE)
ifeq ($(strip $(script_INSTALL_MODE)),)
script_INSTALL_MODE = $(DEFAULT_script_INSTALL_MODE)
endif

DEFAULT_include_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(include_INSTALL_MODE)),)
include_INSTALL_MODE = $(DEFAULT_include_INSTALL_MODE)
endif

DEFAULT_idl_INSTALL_MODE =  $(INSTALL_MODE)
ifeq ($(strip $(idl_INSTALL_MODE)),)
idl_INSTALL_MODE = $(DEFAULT_idl_INSTALL_MODE)
endif

DEFAULT_lib_INSTALL_MODE =  $(INSTALL_MODE)
ifeq ($(strip $(lib_INSTALL_MODE)),)
lib_INSTALL_MODE = $(DEFAULT_lib_INSTALL_MODE)
endif

DEFAULT_data_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(data_INSTALL_MODE)),)
data_INSTALL_MODE = $(DEFAULT_data_INSTALL_MODE)
endif

DEFAULT_state_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(state_INSTALL_MODE)),)
state_INSTALL_MODE = $(DEFAULT_state_INSTALL_MODE)
endif

DEFAULT_man_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man_INSTALL_MODE)),)
man_INSTALL_MODE = $(DEFAULT_man_INSTALL_MODE)
endif

DEFAULT_man1_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man1_INSTALL_MODE)),)
man1_INSTALL_MODE = $(DEFAULT_man1_INSTALL_MODE)
endif

DEFAULT_man2_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man2_INSTALL_MODE)),)
man2_INSTALL_MODE = $(DEFAULT_man2_INSTALL_MODE)
endif

DEFAULT_man3_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man3_INSTALL_MODE)),)
man3_INSTALL_MODE = $(DEFAULT_man3_INSTALL_MODE)
endif

DEFAULT_man4_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man4_INSTALL_MODE)),)
man4_INSTALL_MODE = $(DEFAULT_man4_INSTALL_MODE)
endif

DEFAULT_man5_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man5_INSTALL_MODE)),)
man5_INSTALL_MODE = $(DEFAULT_man5_INSTALL_MODE)
endif

DEFAULT_man6_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man6_INSTALL_MODE)),)
man6_INSTALL_MODE = $(DEFAULT_man6_INSTALL_MODE)
endif

DEFAULT_man7_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man7_INSTALL_MODE)),)
man7_INSTALL_MODE = $(DEFAULT_man7_INSTALL_MODE)
endif

DEFAULT_man8_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(man8_INSTALL_MODE)),)
man8_INSTALL_MODE = $(DEFAULT_man8_INSTALL_MODE)
endif

DEFAULT_manl_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(manl_INSTALL_MODE)),)
manl_INSTALL_MODE = $(DEFAULT_manl_INSTALL_MODE)
endif

DEFAULT_mann_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(mann_INSTALL_MODE)),)
mann_INSTALL_MODE = $(DEFAULT_mann_INSTALL_MODE)
endif

DEFAULT_doc_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(doc_INSTALL_MODE)),)
doc_INSTALL_MODE = $(DEFAULT_doc_INSTALL_MODE)
endif

DEFAULT_nls_INSTALL_MODE = $(INSTALL_MODE)
ifeq ($(strip $(nls_INSTALL_MODE)),)
nls_INSTALL_MODE = $(DEFAULT_doc_INSTALL_MODE)
endif



# )))
# ((( Paths for subshells, makes, and message catalogs

# set search path
DEFAULT_PATH += \
     ".:$(OBJDIR):$(STDCTOP)/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:"
ifeq ($(strip $(PATH)),)
PATH = $(DEFAULT_PATH)
endif


# NLSPATH
DEFAULT_NLSPATH += ./%N:/opt/dcelocal/nls/msg/en_US.ASCII/%N:/usr/local/etc/%N
ifeq ($(strip $(NLSPATH)),)
NLSPATH = $(DEFAULT_NLSPATH)
endif

# )))
# ((( Shell

DEFAULT_SHELL := /bin/sh
ifeq ($(strip $(SHELL)),)
SHELL= $(DEFAULT_SHELL)
endif

ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_USE_GNU=$(CONFIGURE_USE_GNU)
endif

ifeq ($(strip $(USE_GNU)),)
USE_GNU=$(DEFAULT_USE_GNU)
endif

# )))
# ((( RCS

# rcs

DEFAULT_CI := ci
ifeq ($(strip $(CI)),)
CI=$(DEFAULT_CI)
endif

DEFAULT_CO := co
ifeq ($(strip $(CO)),)
CO=$(DEFAULT_CO)
endif

# )))
# ((( remove and echo commands

# remove command
DEFAULT_RM := rm -f
ifeq ($(strip $(RM)),)
RM = $(DEFAULT_RM)
endif

DEFAULT_MV := mv
ifeq ($(strip $(MV)),)
MV = $(DEFAULT_MV)
endif

DEFAULT_CP := cp
ifeq ($(strip $(CP)),)
CP = $(DEFAULT_CP)
endif

# install
ifeq ($(strip $(CONFIGURE_OVERRIDES)),)
DEFAULT_INSTALL := $(CONFIGURE_INSTALL) -c
else
DEFAULT_INSTALL := $(CP) -p -f
endif

ifeq ($(strip $(INSTALL)),)
INSTALL = $(DEFAULT_INSTALL)
endif

DEFAULT_MKDIR := mkdir
ifeq ($(strip $(MKDIR)),)
MKDIR = $(DEFAULT_MKDIR)
endif

DEFAULT_MKDIRHIER := $(MKDIR) -p
ifeq ($(strip $(MKDIRHIER)),)
MKDIRHIER = $(DEFAULT_MKDIRHIER)
endif

DEFAULT_CHMOD := chmod
ifeq ($(strip $(CHMOD)),)
CHMOD = $(DEFAULT_CHMOD)
endif

DEFAULT_TOUCH := touch
ifeq ($(strip $(TOUCH)),)
TOUCH = $(DEFAULT_TOUCH)
endif

DEFAULT_ECHO_COM := @
ifeq ($(strip $(ECHO_COM)),)
ECHO_COM= $(DEFAULT_ECHO_COM)
endif

# )))
# ((( binaries
ifdef CPROGRAMS
DEFAULT_CBINARIES  += $(patsubst %,%_BIN,$(CPROGRAMS))
endif
ifeq ($(strip $(CBINARIES)),)
CBINARIES  = $(DEFAULT_CBINARIES)
endif

ifdef C++PROGRAMS
DEFAULT_C++BINARIES += $(patsubst %,%_BINC++,$(C++PROGRAMS))
endif
ifeq ($(strip $(C++BINARIES)),)
C++BINARIES = $(DEFAULT_C++BINARIES)
endif
# )))
# ((( files to clean

DEFAULT_FilesToClean += *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a        \
                     .emacs_* tags TAGS make.log MakeOut *_BIN*     *INSTALL* \
   *$(IDL_CLIENT_HDR_EXT)  *$(IDL_CLIENT_INL_EXT)  *$(IDL_CLIENT_SRC_EXT)  \
   *$(IDL_SERVER_HDR_EXT)  *$(IDL_SERVER_INL_EXT)  *$(IDL_SERVER_SRC_EXT)  \
   *$(IDL_SERVER_THDR_EXT) *$(IDL_SERVER_TINL_EXT) *$(IDL_SERVER_TSRC_EXT) \
   *$(IDL_SERVER_THDR_EXT) *$(IDL_SERVER_TINL_EXT) *$(IDL_SERVER_TSRC_EXT) 
ifeq ($(strip $(FilesToClean)),)
FilesToClean = $(DEFAULT_FilesToClean)
endif

# )))


ifdef SUBDIRS
DEFAULT_SUBDIR_DIRS += $(patsubst %,%_DIR,$(SUBDIRS))
ifeq ($(strip $(SUBDIR_DIRS)),)
SUBDIR_DIRS = $(DEFAULT_SUBDIR_DIRS)
endif
endif
# )))

REASON = @if [ -f $@ ]; then \
 echo "====== making $(notdir $@) because of $(notdir $?) ======";\
 else \
   echo "====== making (creating) $(notdir $@) from $(notdir $?) ======"; \
 fi
LIBREASON = @echo "====== making $(notdir $@)($(notdir $%))because of $(notdir $?)======"

.SUFFIXES: .elc .el .texi .info .idl .man .ltx

DEFAULT_EMACS := emacs
ifneq ($(strip $(EMACS)),)
EMACS = $(DEFAULT_EMACS)
endif

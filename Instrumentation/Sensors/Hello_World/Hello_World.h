/*                               -*- Mode: C -*- 
 * Hello_World.h --- 
 * Author           : Manoj Srivastava ( srivasta@glaurung.stdc.com ) 
 * Created On       : Fri Oct 19 14:47:16 2001
 * Created On Node  : glaurung.stdc.com
 * Last Modified By : Manoj Srivastava
 * Last Modified On : Wed Oct 24 09:06:49 2001
 * Last Machine Used: glaurung.stdc.com
 * Update Count     : 6
 * Status           : Unknown, Use with caution!
 * HISTORY          : 
 * Description      : 
 * 
 */

/*
 * Copyright (C) 2001 System/Technology Development Corporation
 * This file is part of QoS Metrics Services (QMS)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA
 *
 * You may contact System/Technology Development Corporation at
 *
 *     System/Technology Development Corporation
 *     Suite 500, Center for Innovative Technology,
 *     2214 Rock Hill Road,
 *     Herndon, VA 20170    
 *     (703) 476-0687
 */


#ifndef _HELLO_WORLD_H_
#define _HELLO_WORLD_H_

/** @file Generic_Sensor.idl
 *  @ingroup HelloWorld 
 *  @brief The implementation of a Sensor interface
 *
 *  $Id: Hello_World.h,v 1.7 2001/12/04 23:28:41 nath Exp $
 */

/** @defgroup HelloWorld Hello-World sensor - an example sensor implementation
 * @ingroup Sensors
 * The Hello World servant is a reference implementation of a QMS 
 * Sensor that provides an example of the interactions that a sensor 
 * has with the rest of the distributed QMS infrastructure. It is a
 * simplified implementation, since this sensor deploys no external
 * probes, and has only a single, simple built in probe; hence only
 * one side of the interactions of a generic sensor are exposed here.
 * 
 * This implementation includes Local resource discovery, publishing
 * capabilities to enable global resource discovery, and full XML
 * parsing and validation capabilities
 *
 * When the Sensor is instantiated, it is configured using an XML
 * configuration file - sensorConfiguration.xml that specify the various
 * parameters that the Sensor needs for its operation. The Sensor reads this
 * file and determines what kind of data streams it is going to
 * publish into the QMS environment. Conceptually, each data stream is
 * generated by a probe. 
 *
 * This sensor implementation demonstrates the utility
 * of validation of the messages that flow in the QMS infrastructure
 * by optionally providing a slightly flawed data message every 7
 * messages. This behaviour is configurable by setting the INTRODUCE_ERROR
 * symbol at compile time.
 * 
 * Additionally, this implementation does not implement the full
 * synchronization mechanisms required for handling multiple,
 * simultaneous modifiable requests; in this implementation, pausing,
 * resuming, and stopping any request pauses, resumes, and stops all
 * requests currently active.
 *
 *   - Hello_World @ref HelloWorldFunction
 *   - @ref Running_Hello_World
 *
 * If you have not done this already, it would be a good idea to read
 * the section on @ref QMSSensors and @ref QMSProbes in the documentation in 
 * @ref README.background before you proceed with the HelloWorld Sensor. 
 *
 */

#endif /* _HELLO_WORLD_H_ */

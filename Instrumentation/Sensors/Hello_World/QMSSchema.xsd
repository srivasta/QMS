<?xml version="1.0" encoding="UTF-8"?>
<!--******************************************************************
 * Copyright (c) 2001, System/Technology Development Corporation
 *                
 * Filename:      QMSSchemaReduced.xsd
 * Version:       1.0
 * Description:   Schema Definition File for Sensors and Messages
 *                
 * Author:        Amarendranath Vadlamudi <amar.vadlamudi@stdc.com>
 * Created at:    Wed Oct 24 17:12:06 2001
 * Modified by:   Amarendranath Vadlamudi <amar.vadlamudi@stdc.com>
 * Modified at:   Wed Oct 24 18:16:18 2001
 * Status:        Experimental, do not distribute.
 * Update count:  7
 ******************************************************************-->

<xsd:schema xmlns="http://www.stdc.com/2001/QMSSchema"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://www.stdc.com/2001/QMSSchema"
  elementFormDefault="qualified"
  version="$Id: QMSSchemaReduced.xsd,v 1.4 2001/10/29 15:39:32 nath Exp $">

<!-- BEGIN Generically useful Data Types -->

  <xsd:complexType name="variableType">
    <xsd:annotation>
      <xsd:documentation>
	Defining a generically useful variable element with a name and
	value pair. Useful in the creation of configuration files
	</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="name" type="xsd:string"/>
      <xsd:element name="value" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:simpleType name="QMSSchemaURIType">
    <xsd:annotation>
      <xsd:documentation>
        Restricting the URI's referenced for schemas to have an
        extension of *.xsd. Earlier restrictions to file:// URL's was
        eliminated since it is desirable to use relative URL's to the
        current directory most of the time.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="file://.*\.xsd"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="QMSTransformURIType">
    <xsd:annotation>
      <xsd:documentation>
	Restricting the URI's referenced for XSL transforms to file based
	URL's to avoid having to build in HTTP libraries into the
	Sensors for now.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="file://.*\.xsl"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="versionType">
    <xsd:annotation>
      <xsd:documentation>
	Restricting version numbers to be positive decimal numbers
	with two digits after decimal
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:decimal">
      <xsd:minExclusive value="0.00"/>
      <xsd:fractionDigits value="2"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="positiveInteger">
    <xsd:annotation>
      <xsd:documentation>
	Creating a new simple type for Positive Integer to replace the
	one that is in the standard XML Schems since the Xercer parser
	does not recognize it.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:nonNegativeInteger">
      <xsd:minExclusive value="0"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ipv4AddressType">
    <xsd:annotation>
      <xsd:documentation>
	Datatype for representing IP addresses.  Examples,
	129.83.64.255, 64.128.2.71, etc.
	This datatype restricts each field of the IP address
	to have a value between zero and 255, i.e.,
	[0-255].[0-255].[0-255].[0-255]
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="((1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])"/>
    </xsd:restriction>
  </xsd:simpleType>
  
  <xsd:complexType name="pubsubIDType">
    <xsd:annotation>
      <xsd:documentation>
	This type will be used for supplier ID and recipient ID's in
	the message. Allocation supplier ID's between 1-1000 for
	internal QMS use for now. Hence the derived type. This
	supplierID will be generated by the QMS Trader and allocated
	to each supplier upon request.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="id">
	<xsd:simpleType>
	  <xsd:restriction base="positiveInteger">
	    <xsd:minInclusive value="1001"/>
	  </xsd:restriction>
	</xsd:simpleType>
      </xsd:element>
      <xsd:element name="description" type="xsd:string" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="uniqueNameType">
    <xsd:annotation>
      <xsd:documentation>
	This is currently a string. This is used to register the
	offer in the QMS Trader. At a later point, this will get
	mapped to CIM Schemas at which point the definition of this
	type will change appropriately
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="category">
	<xsd:simpleType>
	  <xsd:restriction base="xsd:string">
	    <xsd:minLength value="6"/>
	  </xsd:restriction>
	</xsd:simpleType>
      </xsd:element>
      <xsd:element name="host" type="ipv4AddressType" minOccurs="0"/>
      <xsd:element name="uuid" type="positiveInteger" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- END Generically Useful Data Types -->

  <!-- QMS Session Elements. Separating them out from inline to
  improve readability and to help people understand Session more
  easily -->
  <!-- BEGIN QMS SESSION ELEMENTS -->
  <xsd:element name="requestID" type="positiveInteger">
    <xsd:annotation>
      <xsd:documentation>
	This is a requestID that will be generated by the
	sender each time a request is sent to a supplier of
	data. This requestID will be used to maintain the notion
	of a session. This will allow the sender to later modify
	the request by sending another request to the supplier
	with the same requestID but with a different version
	number. Thus the supplier will know to modify the
	existing request it is servicing as opposed to starting
	up another data stream to service this
	request. This will allow the sender to terminate the
	request if it is no longer interested in the
	data. Preferably this will be a UUID of some sort. The
	supplier of data will also send out the same requestID
	in its response.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="version" type="xsd:nonNegativeInteger">
    <xsd:annotation>
      <xsd:documentation>
	The default value of this element is "0". If the request
	is modified by the sender and the session is now
	modified to send a different stream of data, the version
	number is incremented. This will enable the supplier of
	data to realize that the data is for the same session,
	but just modified.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element> 

  <xsd:element name="dataID" type="positiveInteger">
    <xsd:annotation>
      <xsd:documentation>
	This is the dataID generated by the supplier of data and
	incremented per message that the supplier sends
	out. This will help establish the order of the data that
	is sent out. Similar to the RequestID, this will be a
	UUID as well.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="minRepetitions">
    <xsd:annotation>
      <xsd:documentation>
	This is a parameter that will be used by the Sensor to
	determine how many times to send the data
	requested. Default value will be 1. "current" will be
	used by the supplier of data to indicate what the count
	is that it's currently on.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
	<xsd:element name="count" type="positiveInteger"/>
	<xsd:element name="current" type="positiveInteger" 
	  minOccurs="0"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
	
  <xsd:element name="minRepeatInterval" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>
	This parameter defines the interval to be used by the
	Sensor between repeated executions of the request for
	data. Default value will be 5 seconds.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  
  <xsd:element name="dataScope">
    <xsd:annotation>
      <xsd:documentation>
	Depending on the nature of the probe that is providing
	the data, the Sensor will have the ability to tag the
	data as reusable or not. For example, a CPU probe may
	tag its data as being reusable. In this case, a request
	from client A will start the probe data flowing, but
	since there may be other requests that later originate
	from other clients, that are also being serviced by the
	same probe, it is essential to tag this data as being
	"Private" when it is meant only for the original request
	generator or "Public", when there are multiple consumers
	of the data. The client may also request that the data should
	be sent marked "Private", so that the data message will
	contain a msgDestination element. If the data comes from a
	reusable probe, then the forceReuse flag will need to be set too.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
	<xsd:enumeration value="Public"/>
	<xsd:enumeration value="Private"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
	
  <xsd:element name="forceReuse" type="xsd:boolean">
    <xsd:annotation>
      <xsd:documentation>
	If the probe is one that generates reusable data, but
	the sender of the request wishes to force the Sensor to
	start another probe just for it, this flag will permit
	that.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  
  <xsd:element name="QoSParameters">
    <xsd:annotation>
      <xsd:documentation>
	QoS Parameters that will be interpreted by the Sensor to
	provide high priority handling by the Sensor, to provide
	high priority scheduling by the Event Channel etc. This
	is a placeholder as more work needs to be done here.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
	<xsd:element name="Priority"
	  type="xsd:nonNegativeInteger"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  
  <xsd:complexType name="sessionType">
    <xsd:annotation>
      <xsd:documentation>
	This type encapsulates all the parameters that will be used
	to establish the notion of a Session between the suppliers and
	the consumers.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="requestID"/>
      <xsd:element ref="version"/>
      <xsd:element ref="dataID" minOccurs="0"/>
      <xsd:element ref="minRepetitions"/>
      <xsd:element ref="minRepeatInterval"/>
      <xsd:element ref="dataScope" minOccurs="0"/>
      <xsd:element ref="forceReuse" minOccurs="0"/>
      <xsd:element ref="QoSParameters" minOccurs="0"/>
      </xsd:sequence>
    </xsd:complexType>
  <!-- END QMS SESSION ELEMENTS -->

  <!-- BEGIN QMS MESSAGE ELEMENTS -->

  <xsd:element name="msgSequenceNo" type="positiveInteger">
    <xsd:annotation>
      <xsd:documentation>A Sequence Number to serve as a
	unique ID per message.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="originatingHost" type="ipv4AddressType">
    <xsd:annotation>
      <xsd:documentation>
	This is the IP address of the host from which this
	message is originating. This could be correlated to
	the SupplierID by querying the QMS Trader as well.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="msgSender" type="pubsubIDType">
    <xsd:annotation>
      <xsd:documentation>
	All QMS Sensors and QMS Active Clients will obtain
	this supplier ID from the QMS Trader and use this to
	identify who is generating this message.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
	
  <xsd:element name="msgDestination" type="pubsubIDType">
    <xsd:annotation>
      <xsd:documentation>
	All QMS Sensors will read this element to determine if
	they should further process the message. If the
	message has a destinationID and that is not the same
	as the Sensor's SupplierID, the message will be
	discarded.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  
  <xsd:element name="msgReplyTo" type="pubsubIDType">
    <xsd:annotation>
      <xsd:documentation>
	The intended recipient of a message could be someone
	other than the generator of the request.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="payload">
    <xsd:annotation>
      <xsd:documentation>
	This is where the actual payload of the QMS Message is
	carried. This payload is not viewed by the Sensor and
	is passed on after the appropriate transform is
	applied directly to the probe for further action.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
	<xsd:any minOccurs="0" maxOccurs="1">
	  <xsd:annotation>
	    <xsd:documentation>
	      This allows for the inclusion of valid XML
	      documents from any namespace. It may be useful
	      to consider constraining the namespaces from
	      which we allow the inclusion at a later point.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:any>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="error" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>
	Any errors generated by the QMS Sensors, clients or
	infrastructure will be carried in this element. Since we have not
	established any structure to the error format yet, this is
	just a string for now.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <!-- An instant view of the structure of a QMS Message -->
  <xsd:element name="QMSMessage">
    <xsd:complexType>
      <xsd:sequence>
	<xsd:element ref="msgSequenceNo"/>
	<xsd:element name="msgDate" type="xsd:string"/>
	<xsd:element name="msgTime" type="xsd:string"/>
	<xsd:element ref="originatingHost"/>
	<xsd:element ref="msgSender"/>
	<xsd:element ref="msgDestination" minOccurs="0"
	  maxOccurs="unbounded"/>
	<xsd:element ref="msgReplyTo" minOccurs="0"
	  maxOccurs="unbounded"/>
	<xsd:element name="QMSUniqueName" type="uniqueNameType"/>
	<xsd:element name="Session" type="sessionType"/>
	<xsd:choice>	
	  <xsd:element ref="payload"/>
	  <xsd:element ref="error"/>
	</xsd:choice>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>
  <!-- END QMS MESSAGE ELEMENTS -->

  <!-- BEGIN CAPABILITY AND CONFIGURATION FILE ELEMENTS -->
  
  <xsd:simpleType name="typeofProbeType">
    <xsd:annotation>
      <xsd:documentation>
	There are three basic types of probes that are dealt with in
	different ways by the Sensor upon deployment
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="continuous"/>
      <xsd:enumeration value="oneshot"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="optionalOfferType">
    <xsd:annotation>
      <xsd:documentation>
	This element will contain all the optional parameters that will be
	exported to the QMS Trader. This will contain name/value
	pairs. Also indicated will be whether this particular property
	is searchable and to what QMS Trader generic property name
	this should be mapped.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="variable" minOccurs="0"
	maxOccurs="unbounded">
	<xsd:complexType>
	  <xsd:sequence>
	    <xsd:element name="name" type="xsd:string"/>
	    <xsd:element name="value" type="xsd:string"/>
	    <xsd:sequence minOccurs="0" maxOccurs="1">
	      <xsd:element name="searchable" fixed="true"/>
	      <xsd:element name="maptoProperty">
		<xsd:annotation>
		  <xsd:documentation>
		    Every property that is searchable has to be mapped
		    to one of the 10 generic properties fields that are
		    available in the QMS Trader
		  </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleType>
		  <xsd:restriction base="positiveInteger">
		    <xsd:minInclusive value="1"/>
		    <xsd:maxInclusive value="10"/>
		  </xsd:restriction>
		</xsd:simpleType>
	      </xsd:element>
	    </xsd:sequence>
	  </xsd:sequence>
	</xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="invocationType">
    <xsd:annotation>
      <xsd:documentation>
        This type contains the parameters needed for the Sensor to actively
        deploy and use the probe. The sensor relies on a parameter named
        "input" which it sends to the XSL Transform engine along with the
        XSL file indicated in probeXSLTFile. "input" can take a value of
	"makeDecision", "getExecString", "getProbeString". The elements in 
	xslParameters constitute other parameters that the Sensor sends to
	the XSLT engine. Additionally, the location of the actual binary
	to be executed will be platform dependent.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="probeExecutable" type="xsd:string"/>
      <xsd:element name="probeXSLTFile" type="xsd:string"/>
      <xsd:element name="xslParameters">
	<xsd:complexType>
	  <xsd:sequence>
	    <xsd:element name="variable" type="variableType" 
	      minOccurs="0" maxOccurs="unbounded"/>
	  </xsd:sequence>
	</xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

    
  <xsd:complexType name="ProbeDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
	The Probe Definition list. The Probe has some configuration
	parameters that are required by the Generic Sensor to figure
	out what Service it provides and what to do with
	it. Additionally there are some mandatory offer properties
	such as the SchemaOffer that the Probe needs to define. All of
	these put together will generate a Service that the Sensor
	will provide when it reads this probe definition.

	These are properties defined for the probe in the capabilities
	file that will allow the Sensor to make a determination as to
	how to handle the deployment and use of the data provided by
	the probe.
	probeType - continuous or oneshot
	dataReusable - Whether the probe data can be reused
	
	These are the name=value pairs that are absolutely mandatory
	and every entity making an offer has to provide these. This refers to
	the QMSUniqueName corresponding to the probe. Note that the
	host and uuid part of the QMSUniqueName will be generated by
	the instance of the object reading this capability or config file, so
	the type is restricted to remove those two elements.

	Every probe that has a Sensor make an offer on its behalf in
	the QMS Trader must have a pointer to the XML Schema that it
	is using to represent its data. This should be available to
	the Sensor as well as the clients that wish to communicate
	with it, thus facilitating the validation of the XML data that
	is created. Additional information needed for the sensor to
	figure out how to handle the probe is included
	probeSchema - the URI to the schema used by the probe
	schemaVersion - version of the schema
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="probeType" type="typeofProbeType"/>
      <xsd:element name="dataReusable" type="xsd:boolean"/>
      <xsd:element name="QMSUniqueName">
	<xsd:complexType>
	  <xsd:complexContent>
	    <xsd:restriction base="uniqueNameType">
	      <xsd:sequence>
		<xsd:element name="category">
		  <xsd:simpleType>
		    <xsd:restriction base="xsd:string">
		      <xsd:minLength value="6"/>
		    </xsd:restriction>
		  </xsd:simpleType>
		</xsd:element>
		<xsd:element name="host" type="ipv4AddressType"
		  minOccurs="0" maxOccurs="0"/>
		<xsd:element name="uuid" type="positiveInteger"
		  minOccurs="0" maxOccurs="0"/>
	      </xsd:sequence>
	    </xsd:restriction>
	  </xsd:complexContent>
	</xsd:complexType>
      </xsd:element>
      <xsd:element name="probeSchema" type="xsd:string"/>
      <xsd:element name="schemaVersion" type="versionType"/>
      <xsd:element name="Offer" type="optionalOfferType"/>
      <xsd:element name="Invoke" type="invocationType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="sensorCapability">
    <xsd:annotation>
      <xsd:documentation>
	The Sensor capability file consists of many fragments that are
	put into the file by each Probe that the sensor is capable of
	providing data for.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
	<xsd:element name="Probe" type="ProbeDefinitionType"
	  maxOccurs="unbounded"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <xsd:complexType name="sensorServiceType">
    <xsd:annotation>
      <xsd:documentation>
	Each Sensor offers many services to the QMS world and each of
	those services will make offers into the QMS Trader. Since
	each Sensor implements the Command and Control Corba
	interface, at a minimum, there will be a Sensor service that
	will use the mandatoryCorbaOfferProperties in the choice
	below. This is the case with the Generic Sensor. However, if
	the QMS citizen (Sensor) offers up other services from
	built-in probes, for instance, then it makes the corresponding
	offers in the QMS Trader again.
	</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:sequence minOccurs="0">
	<xsd:element name="probeType" type="typeofProbeType"/>
	<xsd:element name="dataReusable" type="xsd:boolean"/>
      </xsd:sequence>
      <xsd:element name="QMSUniqueName">
	<xsd:complexType>
	  <xsd:complexContent>
	    <xsd:restriction base="uniqueNameType">
	      <xsd:sequence>
		<xsd:element name="category">
		  <xsd:simpleType>
		    <xsd:restriction base="xsd:string">
		      <xsd:minLength value="6"/>
		    </xsd:restriction>
		  </xsd:simpleType>
		</xsd:element>
		<xsd:element name="host" type="ipv4AddressType"
		  minOccurs="0" maxOccurs="0"/>
		<xsd:element name="uuid" type="positiveInteger"
		  minOccurs="0" maxOccurs="0"/>
	      </xsd:sequence>
	    </xsd:restriction>
	  </xsd:complexContent>
	</xsd:complexType>
      </xsd:element>
      <xsd:sequence>
	<xsd:element name="probeSchema" type="xsd:string"/>
	<xsd:element name="schemaVersion" type="versionType"/>
      </xsd:sequence>
      <xsd:element name="Offer" type="optionalOfferType"/>
      <xsd:element name="Instance" minOccurs="0">
	<xsd:annotation>
	  <xsd:documentation>
	    The Instance element is an optional part of every
	    sensorService and contains variables with name/value pairs
	    and is specific to the service and will have meaning to
	    the entity that is building the service. For instance, the
	    Generic Sensor may have a variable that gives it the
	    location of the capability file it is supposed to read.
	  </xsd:documentation>
	</xsd:annotation>
	<xsd:complexType>
	  <xsd:sequence>
	    <xsd:element name="variable" type="variableType" 
	      maxOccurs="unbounded"/>
	  </xsd:sequence>
	</xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:element name="sensorConfiguration">
    <xsd:annotation>
      <xsd:documentation>
	The Sensor configuration file will have all the elements that
	will be necessary for the Sensor to make an offer to the QMS
	Trader. Note that not all Sensors will be passive
	either. There may be Sensors that have Probes built into them
	and will correspondingly make the requisite offers into the
	Trader. The sensor itself will have a CORBA presence and an
        offer relative to it since it implements the QMS Command and
        Control interface. The parameters relative to that offer are
        specified in the mandatoryCorbaOfferProperties along with any
        offer variables it may have. The Instance portion of the
        Configuration allows the specification of variables that will
        have meaning for the Sensor.

        It is expected that a well known location will be used for the
        QMS Schema definition. However, the configuration file can
        optionally specify the location as desired for the Sensor. The
        default value is "QMSSchema.xsd" in the working directory.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
	<xsd:element name="QMSSchema" type="xsd:string"
	  default="QMSSchema.xsd"/>
	<xsd:element name="QMSUniqueName">
	  <xsd:complexType>
	    <xsd:complexContent>
	      <xsd:restriction base="uniqueNameType">
		<xsd:sequence>
		  <xsd:element name="category">
		    <xsd:simpleType>
		      <xsd:restriction base="xsd:string">
			<xsd:minLength value="6"/>
		      </xsd:restriction>
		    </xsd:simpleType>
		  </xsd:element>
		  <xsd:element name="host" type="ipv4AddressType"
		    minOccurs="0" maxOccurs="0"/>
		  <xsd:element name="uuid" type="positiveInteger"
		    minOccurs="0" maxOccurs="0"/>
		</xsd:sequence>
	      </xsd:restriction>
	    </xsd:complexContent>
	  </xsd:complexType>
	</xsd:element>
	<xsd:element name="interfaceVersion" type="versionType">
	  <xsd:annotation>
	    <xsd:documentation>
	      If the entity making the offer also provides a CORBA
	      interface (all QMS Citizens do and other clients may as well)
	      we'd like to identify the IDL interfaces they offer up to the
	      world with specific version numbers. This will permit clients
	      to figure out if they are using the right version of the IDL
	      interface while trying to talk to the CORBA entity.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="interfaceDescription" type="xsd:string"/>
	<xsd:element name="Offer" type="optionalOfferType" minOccurs="0"/>
	<xsd:element name="Instance" minOccurs="0">
	  <xsd:complexType>
	    <xsd:sequence>
	      <xsd:element name="variable" type="variableType" 
		maxOccurs="unbounded"/>
	    </xsd:sequence>
	  </xsd:complexType>
	</xsd:element>
	<xsd:element name="sensorService" type="sensorServiceType" 
	  minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <!-- END CAPABILITY AND CONFIGURATION FILE ELEMENTS -->
  
</xsd:schema>


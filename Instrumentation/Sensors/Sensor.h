//                              -*- Mode: C++ -*-
// Sensor.h ---
// Author           : Manoj Srivastava ( srivasta@glaurung.stdc.com )
// Created On       : Mon Feb  5 01:34:23 2001
// Created On Node  : glaurung.stdc.com
// Last Modified By : Manoj Srivastava
// Last Modified On : Wed Oct 24 12:23:24 2001
// Last Machine Used: glaurung.stdc.com
// Update Count     : 3
// Status           : Unknown, Use with caution!
// HISTORY          :
// Description      :
//
// $Id: Sensor.h,v 1.6 2001/12/02 03:30:21 srivasta Exp $

/*
 * Copyright (C) 2001 System/Technology Development Corporation
 * This file is part of QoS Metrics Services (QMS)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA
 *
 * You may contact System/Technology Development Corporation at
 *
 *     System/Technology Development Corporation
 *     Suite 500, Center for Innovative Technology,
 *     2214 Rock Hill Road,
 *     Herndon, VA 20170
 *     (703) 476-0687
 */


#ifndef SENSOR_H
#define SENSOR_H

/** @file Sensor.h
 *  @ingroup Sensors
 *  @brief QMS Sensors - QoS metrics gatherers and data supplier
 *
 */


/** @defgroup Sensors QMS Sensors - QoS metrics gatherers and data supplier
 *  @ingroup  Instrumentation
 *
 *  Sensors are the data source origination points for the rest of the
 *  QMS infrastructure. They provide a standardized interface for data
 *  requests and retrieval, they publish their presence on the system
 *  and thus allow the data resources to be discovered by other
 *  entities in the system.  Sensors should be designed for efficient
 *  handling of multiple requests.
 *
 *  Sensors also provide facilities like rate and threshold triggers,
 *  allow for periodic and repeatitive data probes, provide averaging
 *  and other statistical and meta measurement reporting.
 *
 *  Sensors also instantiate mechanisms for deploying, activating, and
 *  retracting probes, and may themselves be instrumented with probes
 *  to record their own activities.
 *
 * A Sensor is a QMS citizen that will publish data into the QMS environment.
 * Since it is a QMS citizen, it is required to expose some mandatory Corba
 * interfaces, that will enable a QMS administrator to control this Sensor
 * causing it to shutdown, pause etc. This interface is called the Command
 * and Control Interface. The more relevant of these interfaces that the
 * Sensor provides is the ping() interface as is explained below
 *
 * When the Sensor is instantiated, it is configured using an XML
 * configuration file - SensorConfiguration.xml that specify the various
 * parameters that the Sensor needs for its operation. The Sensor reads this
 * file and determines what kind of data streams it is going to publish into
 * the QMS environment. Conceptually, each data stream is generated by a
 * probe. In the case of the Generic Sensor, each probe is actually described
 * in a configuration file - sensorCapability.xml and each probe is also an
 * external entity that is started/stopped by the Sensor. In the case of
 * other Sensors however, the probes are built into the Sensor itself and
 * hence are described in the configuration file directly.
 *
 * Note that with each data stream, ie. Probe there is a
 * QMSUniqueName/Category that is defined. This string should be selected
 * carefully as it is indicative of the nature of the data being provided by
 * the probe. Once the Sensor determines how many data streams it is
 * publishing (i.e., number of probes), it contacts the QMS Trader to obtain
 * a SupplierID for itself. Every entity that publishes data in QMS is
 * required to have a SupplierID. For each data stream that the Sensor is
 * publishing, it obtains the Event Channel information from the QMS Trader.
 * Now it publishes YellowPages Offers (YP Offers) in the QMS Trader with
 * information about every data stream that it is capable of providing to the
 * world.
 *
 *
 */


#endif // SENSOR_H


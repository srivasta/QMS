/*                               -*- Mode: C++ -*- 
 * Message_Format.h --- 
 * Author           : Manoj Srivastava ( srivasta@ember.stdc.com ) 
 * Created On       : Fri Oct 12 17:32:08 2001
 * Created On Node  : ember.stdc.com
 * Last Modified By : Manoj Srivastava
 * Last Modified On : Sat Nov  3 00:29:42 2001
 * Last Machine Used: ember.stdc.com
 * Update Count     : 5
 * Status           : Unknown, Use with caution!
 * HISTORY          : 
 * Description      : 
 * 
 */

/*
 * Copyright (C) 2001 System/Technology Development Corporation
 * This file is part of QoS Metrics Services (QMS)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA
 *
 * You may contact System/Technology Development Corporation at
 *
 *     System/Technology Development Corporation
 *     Suite 500, Center for Innovative Technology,
 *     2214 Rock Hill Road,
 *     Herndon, VA 20170    
 *     (703) 476-0687
 */


/** @file Message_Format.h
 *  @ingroup GenericSensor
 *  @brief C++ representation of the payload data for the hello world probe
 *
 * $Id: Message_Format.h,v 1.13 2001/12/09 02:11:58 nath Exp $
 */

#ifndef _MESSAGE_FORMAT_H_
#define _MESSAGE_FORMAT_H_


/// The guts of the message payload
struct Request 
{
  /// The first name of the requestor
  string firstname;
  // The last name of the requestor
  string lastname;
  /// Potential modifying action to be taken
  string action;
};

/// intermediate level of the heirarchy of the payload
struct helloWorld
{
  /// The guts of the message payload
  struct Request request;
};
  
/// The contents of the payload
struct payload_data 
{
  /// Data contained in the message
  struct helloWorld data;
};

namespace STDC
{
  namespace QMS
  {
    namespace Citizen
    {
      class Probe_Proxy;
    };
  };
};

const int MAX_DATA = 10;

/// The information we store about each probe
struct probe_info
{
  unsigned long id;
  int data_count;
  int current_index;
  char *data_store[MAX_DATA];
  STDC::QMS::Citizen::Probe_Proxy * probe_p; /// associated probe
};


/// The structure the message (and the parsed data) are stored in
struct query_info 
{
  string query;			/// The raw query
  string key;			/// The unique identifier 
  STDC::QMS::QMSMessage config; /// Parsed message headers
  STDC::QMS::Citizen::Probe_Proxy * probe_p; /// associated probe
  struct probe_info *probe_info_p; /// information about the probe
};

#endif /* _MESSAGE_FORMAT_H_ */

// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_GENERIC_SENSORS_T_H_
#define _TAO_IDL_GENERIC_SENSORS_T_H_

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (ACE_HAS_USING_KEYWORD)
TAO_NAMESPACE  POA_STDC
{
  TAO_NAMESPACE  QMS
  {
    TAO_NAMESPACE  Citizen
    {
      // TIE class: Refer to CORBA v2.2, Section 20.34.4
      template <class T>
      class  Generic_Sensor_tie : public Generic_Sensor
      {
      public:
        Generic_Sensor_tie (T &t);
        // the T& ctor
        Generic_Sensor_tie (T &t, PortableServer::POA_ptr poa);
        // ctor taking a POA
        Generic_Sensor_tie (T *tp, CORBA::Boolean release=1);
        // ctor taking pointer and an ownership flag
        Generic_Sensor_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
        // ctor with T*, ownership flag and a POA
        ~Generic_Sensor_tie (void);
        // dtor
        
        // TIE specific functions
        T *_tied_object (void);
        // return the underlying object
        void _tied_object (T &obj);
        // set the underlying object
        void _tied_object (T *obj, CORBA::Boolean release=1);
        // set the underlying object and the ownership flag
        CORBA::Boolean _is_owner (void);
        // do we own it
        void _is_owner (CORBA::Boolean b);
        // set the ownership
        
        // overridden ServantBase operations
        PortableServer::POA_ptr _default_POA (
            CORBA::Environment &ACE_TRY_ENV = 
              TAO_default_environment ()
          );
        void disconnect_EC (
            const char * reason,
            const char * credentials
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException,
            STDC::QMS::Citizen::QMS_Citizen_Error
          ));
        
                void reconnect_EC (
            const char * reason,
            const char * EC_Name,
            const char * credentials
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException,
            STDC::QMS::Citizen::QMS_Citizen_Error
          ));
        
                void show_operating_level (
            CORBA::Short_out level
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
                void set_operating_level (
            CORBA::Short level,
            const char * credentials
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException,
            STDC::QMS::Citizen::QMS_Citizen_Error
          ));
        
                void stats (
            const char * credentials,
            CORBA::String_out stats
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
                void ping (
            CORBA::Short_out ack
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException,
            STDC::QMS::Citizen::QMS_Citizen_Error
          ));
        
                void pause (
            const char * reason,
            const char * credentials,
            CORBA::Short_out ack
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException,
            STDC::QMS::QMS_Error
          ));
        
                void resume (
            const char * reason,
            const char * credentials,
            CORBA::Short_out ack
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException,
            STDC::QMS::QMS_Error
          ));
        
                void stop (
            const char * reason,
            const char * credentials,
            CORBA::Short_out ack
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException,
            STDC::QMS::QMS_Error
          ));
        
              private:
        T *ptr_;
        PortableServer::POA_var poa_;
        CORBA::Boolean rel_;
        
        // copy and assignment are not allowed
        Generic_Sensor_tie (const Generic_Sensor_tie &);
        void operator= (const Generic_Sensor_tie &);
      };

    }
    TAO_NAMESPACE_CLOSE // module STDC::QMS::Citizen
  }
  TAO_NAMESPACE_CLOSE // module STDC::QMS
}
TAO_NAMESPACE_CLOSE // module STDC
#endif /* ACE_HAS_USING_KEYWORD */

#if defined (__ACE_INLINE__)
#include "Generic_SensorS_T.i"
#endif /* defined INLINE */


#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
#include "Generic_SensorS_T.cpp"
#endif /* defined REQUIRED SOURCE */


#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
#pragma implementation ("Generic_SensorS_T.cpp")
#endif /* defined REQUIRED PRAGMA */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#endif /* ifndef */

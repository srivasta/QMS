// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::disconnect_EC_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Command_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Command::disconnect_EC_skel (
      req,
      (POA_STDC::QMS::Citizen::Command_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::reconnect_EC_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Command_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Command::reconnect_EC_skel (
      req,
      (POA_STDC::QMS::Citizen::Command_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::show_operating_level_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Command_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Command::show_operating_level_skel (
      req,
      (POA_STDC::QMS::Citizen::Command_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::set_operating_level_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Command_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Command::set_operating_level_skel (
      req,
      (POA_STDC::QMS::Citizen::Command_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::stats_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Command_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Command::stats_skel (
      req,
      (POA_STDC::QMS::Citizen::Command_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::ping_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Command_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Command::ping_skel (
      req,
      (POA_STDC::QMS::Citizen::Command_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::pause_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Control_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Control::pause_skel (
      req,
      (POA_STDC::QMS::Citizen::Control_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::resume_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Control_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Control::resume_skel (
      req,
      (POA_STDC::QMS::Citizen::Control_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}
ACE_INLINE void POA_STDC::QMS::Citizen::Generic_Sensor::stop_skel (
    TAO_ServerRequest &req,
    void *obj,
    void *context,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_STDC::QMS::Citizen::Control_ptr impl = (POA_STDC::QMS::Citizen::Generic_Sensor_ptr) obj;
  POA_STDC::QMS::Citizen::Control::stop_skel (
      req,
      (POA_STDC::QMS::Citizen::Control_ptr) impl,
      context,
       ACE_TRY_ENV
    );
}

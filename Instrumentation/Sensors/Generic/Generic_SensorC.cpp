// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "Generic_SensorC.h"

#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "Generic_SensorC.i"
#endif /* !defined INLINE */

int STDC::QMS::Citizen::Generic_Sensor::_tao_class_id = 0;

STDC::QMS::Citizen::Generic_Sensor_ptr
tao_STDC_QMS_Citizen_Generic_Sensor_duplicate (
    STDC::QMS::Citizen::Generic_Sensor_ptr p
  )
{
  return STDC::QMS::Citizen::Generic_Sensor::_duplicate (p);
}

void
tao_STDC_QMS_Citizen_Generic_Sensor_release (
    STDC::QMS::Citizen::Generic_Sensor_ptr p
  )
{
  CORBA::release (p);
}

STDC::QMS::Citizen::Generic_Sensor_ptr
tao_STDC_QMS_Citizen_Generic_Sensor_nil (
    void
  )
{
  return STDC::QMS::Citizen::Generic_Sensor::_nil ();
}

STDC::QMS::Citizen::Generic_Sensor_ptr
tao_STDC_QMS_Citizen_Generic_Sensor_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return STDC::QMS::Citizen::Generic_Sensor::_narrow (p, ACE_TRY_ENV);
}

CORBA::Object *
tao_STDC_QMS_Citizen_Generic_Sensor_upcast (
    void *src
  )
{
  STDC::QMS::Citizen::Generic_Sensor **tmp =
    ACE_static_cast (STDC::QMS::Citizen::Generic_Sensor **, src);
  return *tmp;
}

// *************************************************************
// Operations for class STDC::QMS::Citizen::Generic_Sensor_var
// *************************************************************

STDC::QMS::Citizen::Generic_Sensor_var::Generic_Sensor_var (void) // default constructor
  : ptr_ (Generic_Sensor::_nil ())
{}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_var::ptr (void) const
{
  return this->ptr_;
}

STDC::QMS::Citizen::Generic_Sensor_var::Generic_Sensor_var (const ::STDC::QMS::Citizen::Generic_Sensor_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (Generic_Sensor::_duplicate (p.ptr ()))
{}

STDC::QMS::Citizen::Generic_Sensor_var::~Generic_Sensor_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

STDC::QMS::Citizen::Generic_Sensor_var &
STDC::QMS::Citizen::Generic_Sensor_var::operator= (Generic_Sensor_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

STDC::QMS::Citizen::Generic_Sensor_var &
STDC::QMS::Citizen::Generic_Sensor_var::operator= (const ::STDC::QMS::Citizen::Generic_Sensor_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::STDC::QMS::Citizen::Generic_Sensor::_duplicate (p.ptr ());
  }
  return *this;
}

STDC::QMS::Citizen::Generic_Sensor_var::operator const ::STDC::QMS::Citizen::Generic_Sensor_ptr &() const // cast
{
  return this->ptr_;
}

STDC::QMS::Citizen::Generic_Sensor_var::operator ::STDC::QMS::Citizen::Generic_Sensor_ptr &() // cast 
{
  return this->ptr_;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_var::operator-> (void) const
{
  return this->ptr_;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_var::in (void) const
{
  return this->ptr_;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr &
STDC::QMS::Citizen::Generic_Sensor_var::inout (void)
{
  return this->ptr_;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr &
STDC::QMS::Citizen::Generic_Sensor_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::STDC::QMS::Citizen::Generic_Sensor::_nil ();
  return this->ptr_;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::STDC::QMS::Citizen::Generic_Sensor_ptr val = this->ptr_;
  this->ptr_ = ::STDC::QMS::Citizen::Generic_Sensor::_nil ();
  return val;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_var::tao_duplicate (Generic_Sensor_ptr p)
{
  return ::STDC::QMS::Citizen::Generic_Sensor::_duplicate (p);
}

void
STDC::QMS::Citizen::Generic_Sensor_var::tao_release (Generic_Sensor_ptr p)
{
  CORBA::release (p);
}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_var::tao_nil (void)
{
  return ::STDC::QMS::Citizen::Generic_Sensor::_nil ();
}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_var::tao_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return ::STDC::QMS::Citizen::Generic_Sensor::_narrow (p, ACE_TRY_ENV);
}

CORBA::Object *
STDC::QMS::Citizen::Generic_Sensor_var::tao_upcast (void *src)
{
  Generic_Sensor **tmp =
    ACE_static_cast (Generic_Sensor **, src);
  return *tmp;
}

// *************************************************************
// Operations for class STDC::QMS::Citizen::Generic_Sensor_out
// *************************************************************

STDC::QMS::Citizen::Generic_Sensor_out::Generic_Sensor_out (Generic_Sensor_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::STDC::QMS::Citizen::Generic_Sensor::_nil ();
}

STDC::QMS::Citizen::Generic_Sensor_out::Generic_Sensor_out (Generic_Sensor_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::STDC::QMS::Citizen::Generic_Sensor::_nil ();
}

STDC::QMS::Citizen::Generic_Sensor_out::Generic_Sensor_out (const ::STDC::QMS::Citizen::Generic_Sensor_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Generic_Sensor_out &, p).ptr_)
{}

::STDC::QMS::Citizen::Generic_Sensor_out &
STDC::QMS::Citizen::Generic_Sensor_out::operator= (const ::STDC::QMS::Citizen::Generic_Sensor_out &p)
{
  this->ptr_ = ACE_const_cast (Generic_Sensor_out&, p).ptr_;
  return *this;
}

STDC::QMS::Citizen::Generic_Sensor_out &
STDC::QMS::Citizen::Generic_Sensor_out::operator= (const ::STDC::QMS::Citizen::Generic_Sensor_var &p)
{
  this->ptr_ = ::STDC::QMS::Citizen::Generic_Sensor::_duplicate (p.ptr ());
  return *this;
}

STDC::QMS::Citizen::Generic_Sensor_out &
STDC::QMS::Citizen::Generic_Sensor_out::operator= (Generic_Sensor_ptr p)
{
  this->ptr_ = p;
  return *this;
}

STDC::QMS::Citizen::Generic_Sensor_out::operator ::STDC::QMS::Citizen::Generic_Sensor_ptr &() // cast
{
  return this->ptr_;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr &
STDC::QMS::Citizen::Generic_Sensor_out::ptr (void) // ptr
{
  return this->ptr_;
}

::STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor_out::operator-> (void)
{
  return this->ptr_;
}


#if (TAO_HAS_INTERCEPTORS == 1)
#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

STDC::QMS::Citizen::_TAO_Generic_Sensor_Proxy_Impl::_TAO_Generic_Sensor_Proxy_Impl (void)
{}

STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Impl::_TAO_Generic_Sensor_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods


//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

STDC::QMS::Citizen::_TAO_Generic_Sensor_Proxy_Broker::_TAO_Generic_Sensor_Proxy_Broker (void)
{
}

STDC::QMS::Citizen::_TAO_Generic_Sensor_Proxy_Broker::~_TAO_Generic_Sensor_Proxy_Broker (void)
{
}

STDC::QMS::Citizen::_TAO_Generic_Sensor_Proxy_Broker * (*STDC_QMS_Citizen__TAO_Generic_Sensor_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Broker *
STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Broker::the_TAO_Generic_Sensor_Remote_Proxy_Broker (void)
{
  static ::STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Broker::_TAO_Generic_Sensor_Remote_Proxy_Broker (void)
{
}

STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Broker::~_TAO_Generic_Sensor_Remote_Proxy_Broker (void)
{
}

STDC::QMS::Citizen::_TAO_Generic_Sensor_Proxy_Impl&
STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Broker::select_proxy (
  ::STDC::QMS::Citizen::Generic_Sensor *,
  CORBA::Environment &
)
{
  return this->remote_proxy_impl_;
}


//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


// default constructor
STDC::QMS::Citizen::Generic_Sensor::Generic_Sensor (int collocated)
{
  this->STDC_QMS_Citizen_Generic_Sensor_setup_collocation (collocated);
}

// destructor
STDC::QMS::Citizen::Generic_Sensor::~Generic_Sensor (void)
{}

void
STDC::QMS::Citizen::Generic_Sensor::STDC_QMS_Citizen_Generic_Sensor_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_Generic_Sensor_Proxy_Broker_ =
      ::STDC_QMS_Citizen__TAO_Generic_Sensor_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_Generic_Sensor_Proxy_Broker_ =
      ::STDC::QMS::Citizen::_TAO_Generic_Sensor_Remote_Proxy_Broker::the_TAO_Generic_Sensor_Remote_Proxy_Broker ();
  
  this->STDC_QMS_Citizen_Command_setup_collocation (collocated);
}

void STDC::QMS::Citizen::Generic_Sensor::_tao_any_destructor (void *_tao_void_pointer)
{
  Generic_Sensor *tmp = ACE_static_cast (Generic_Sensor*, _tao_void_pointer);
  CORBA::release (tmp);
}

STDC::QMS::Citizen::Generic_Sensor_ptr STDC::QMS::Citizen::Generic_Sensor::_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  if (CORBA::is_nil (obj))
    return Generic_Sensor::_nil ();
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a = obj->_is_a ("IDL:STDC/QMS/Citizen/Generic_Sensor:1.0", ACE_TRY_ENV);
      ACE_CHECK_RETURN (Generic_Sensor::_nil ());
      if (is_a == 0)
        return Generic_Sensor::_nil ();
    }
  return Generic_Sensor::_unchecked_narrow (obj, ACE_TRY_ENV);
}

STDC::QMS::Citizen::Generic_Sensor_ptr STDC::QMS::Citizen::Generic_Sensor::_unchecked_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &
  )
{
  if (CORBA::is_nil (obj))
    return Generic_Sensor::_nil ();
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      if (stub)
        stub->_incr_refcnt ();
      Generic_Sensor_ptr default_proxy = Generic_Sensor::_nil ();

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          STDC_QMS_Citizen__TAO_Generic_Sensor_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::STDC::QMS::Citizen::Generic_Sensor (
                  stub,
                  1,
                  obj->_servant ()
                ),
              Generic_Sensor::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::STDC::QMS::Citizen::Generic_Sensor (
                  stub,
                  0,
                  obj->_servant ()
                ),
              Generic_Sensor::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast
        (
          Generic_Sensor_ptr,
            obj->_tao_QueryInterface
              (
                ACE_reinterpret_cast
                  (
                    ptr_arith_t,
                    &Generic_Sensor::_tao_class_id
                  )
              )
        );
}

STDC::QMS::Citizen::Generic_Sensor_ptr
STDC::QMS::Citizen::Generic_Sensor::_duplicate (Generic_Sensor_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

CORBA::Boolean STDC::QMS::Citizen::Generic_Sensor::_is_a (const CORBA::Char *value, CORBA::Environment &ACE_TRY_ENV)
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:STDC/QMS/Citizen/Generic_Sensor:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:STDC/QMS/Citizen/Command:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:STDC/QMS/Citizen/Control:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
  return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, ACE_TRY_ENV);
}

void *STDC::QMS::Citizen::Generic_Sensor::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::STDC::QMS::Citizen, Generic_Sensor)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::STDC::QMS::Citizen::Command::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            STDC::QMS::Citizen::Command_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::STDC::QMS::Citizen::Control::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            STDC::QMS::Citizen::Control_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* STDC::QMS::Citizen::Generic_Sensor::_interface_repository_id (void) const
{
  return "IDL:STDC/QMS/Citizen/Generic_Sensor:1.0";
}

static const CORBA::Long _oc_STDC_QMS_Citizen_Generic_Sensor[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x53544443), 
  ACE_NTOHL (0x2f514d53), 
  ACE_NTOHL (0x2f436974), 
  ACE_NTOHL (0x697a656e), 
  ACE_NTOHL (0x2f47656e), 
  ACE_NTOHL (0x65726963), 
  ACE_NTOHL (0x5f53656e), 
  ACE_NTOHL (0x736f723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:STDC/QMS/Citizen/Generic_Sensor:1.0
  15,
  ACE_NTOHL (0x47656e65), 
  ACE_NTOHL (0x7269635f), 
  ACE_NTOHL (0x53656e73), 
  ACE_NTOHL (0x6f720000),  // name = Generic_Sensor
};

static CORBA::TypeCode _tc_TAO_tc_STDC_QMS_Citizen_Generic_Sensor (
    CORBA::tk_objref,
    sizeof (_oc_STDC_QMS_Citizen_Generic_Sensor),
    (char *) &_oc_STDC_QMS_Citizen_Generic_Sensor,
    0,
    sizeof (STDC::QMS::Citizen::Generic_Sensor)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (STDC)
TAO_NAMESPACE_BEGIN (QMS)
TAO_NAMESPACE_BEGIN (Citizen)
TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_Generic_Sensor, &_tc_TAO_tc_STDC_QMS_Citizen_Generic_Sensor)
TAO_NAMESPACE_END
TAO_NAMESPACE_END
TAO_NAMESPACE_END

void operator<<= (CORBA::Any &_tao_any, STDC::QMS::Citizen::Generic_Sensor_ptr _tao_elem)
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        STDC::QMS::Citizen::_tc_Generic_Sensor, 
        TAO_ENCAP_BYTE_ORDER,
        stream.begin (),
        1,
        STDC::QMS::Citizen::Generic_Sensor::_duplicate (_tao_elem),
        STDC::QMS::Citizen::Generic_Sensor::_tao_any_destructor
      );
  }
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, STDC::QMS::Citizen::Generic_Sensor_ptr &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = STDC::QMS::Citizen::Generic_Sensor::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (STDC::QMS::Citizen::_tc_Generic_Sensor, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      ((CORBA::Any *)&_tao_any)->_tao_replace (
          STDC::QMS::Citizen::_tc_Generic_Sensor,
          1,
          _tao_elem,
          STDC::QMS::Citizen::Generic_Sensor::_tao_any_destructor
        );
      return 1;
    }
  }
  ACE_CATCHANY
  {
    _tao_elem = STDC::QMS::Citizen::Generic_Sensor::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  _tao_elem = STDC::QMS::Citizen::Generic_Sensor::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<STDC::QMS::Citizen::Generic_Sensor,STDC::QMS::Citizen::Generic_Sensor_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<STDC::QMS::Citizen::Generic_Sensor,STDC::QMS::Citizen::Generic_Sensor_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const STDC::QMS::Citizen::Generic_Sensor_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    STDC::QMS::Citizen::Generic_Sensor_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      STDC::QMS::Citizen::Generic_Sensor::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}


// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::Generic_Sensor_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::Generic_Sensor_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::Generic_Sensor_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::Generic_Sensor_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::~Generic_Sensor_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::_default_POA (CORBA::Environment &ACE_TRY_ENV)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Generic_Sensor::_default_POA (ACE_TRY_ENV);
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::disconnect_EC  (
    const char * reason,
    const char * credentials
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    STDC::QMS::Citizen::QMS_Citizen_Error
  ))
{
  this->ptr_->disconnect_EC (
reason,
    credentials
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::reconnect_EC  (
    const char * reason,
    const char * EC_Name,
    const char * credentials
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    STDC::QMS::Citizen::QMS_Citizen_Error
  ))
{
  this->ptr_->reconnect_EC (
reason,
    EC_Name,
    credentials
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::show_operating_level  (
    CORBA::Short_out level
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->show_operating_level (
level
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::set_operating_level  (
    CORBA::Short level,
    const char * credentials
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    STDC::QMS::Citizen::QMS_Citizen_Error
  ))
{
  this->ptr_->set_operating_level (
level,
    credentials
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::stats  (
    const char * credentials,
    CORBA::String_out stats
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->stats (
credentials,
    stats
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::ping  (
    CORBA::Short_out ack
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    STDC::QMS::Citizen::QMS_Citizen_Error
  ))
{
  this->ptr_->ping (
ack
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::pause  (
    const char * reason,
    const char * credentials,
    CORBA::Short_out ack
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    STDC::QMS::QMS_Error
  ))
{
  this->ptr_->pause (
reason,
    credentials,
    ack
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::resume  (
    const char * reason,
    const char * credentials,
    CORBA::Short_out ack
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    STDC::QMS::QMS_Error
  ))
{
  this->ptr_->resume (
reason,
    credentials,
    ack
  );
}

template <class T> ACE_INLINE
void POA_STDC::QMS::Citizen::Generic_Sensor_tie<T>::stop  (
    const char * reason,
    const char * credentials,
    CORBA::Short_out ack
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    STDC::QMS::QMS_Error
  ))
{
  this->ptr_->stop (
reason,
    credentials,
    ack
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

